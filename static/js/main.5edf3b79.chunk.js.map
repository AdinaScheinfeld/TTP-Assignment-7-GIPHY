{"version":3,"sources":["components/SearchField.jsx","components/GifCard.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchField","props","getUserInput","event","setState","userInput","target","value","getRegular","url","fetch","then","response","json","data","update","catch","err","console","log","getTrending","getRandom","state","className","type","placeholder","onChange","this","id","onClick","Component","GifCard","src","alt","App","componentDidMount","getData","newData","map","item","index","images","original","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRA2EeA,G,wDArEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SAXzB,EAenBC,WAAa,SAACL,GACV,IAAIM,EAAG,gDAA4CN,EAAMG,OAAOC,MAAzD,6CACPG,MAAMD,GACLE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,EAAKR,SAAS,CAAEU,KAAMF,EAASE,OAC/B,EAAKb,MAAMc,OAAOH,EAASE,SAE9BE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAvBX,EA2BnBG,YAAc,WAEVV,MADU,kFAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,EAAKX,MAAMc,OAAOH,EAASE,SAE9BE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAlCX,EAsCnBI,UAAY,WAERX,MADU,gFAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,EAAKR,SAAS,CAAEU,KAAMF,EAASE,OAC/B,EAAKb,MAAMc,OAAO,CAACH,EAASE,UAE/BE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OA3C1B,EAAKK,MAAQ,CACTjB,UAAW,GACXS,KAAM,IALK,E,qDAmDf,OACI,sBAAKS,UAAU,YAAf,UAEI,qBAAKA,UAAU,YAAf,SACI,uBAAOC,KAAK,OAAOC,YAAY,eAAeC,SAAUC,KAAKzB,aAAc0B,GAAG,UAGlF,sBAAKL,UAAU,UAAf,UACI,wBAAQM,QAASF,KAAKnB,WAAYD,MAAOoB,KAAKL,MAAMjB,UAApD,oBACA,wBAAQwB,QAASF,KAAKP,YAAtB,sBACA,wBAAQS,QAASF,KAAKN,UAAtB,8B,GAhEMS,cCQXC,G,MARC,SAAA9B,GACZ,OACI,qBAAKsB,UAAU,YAAf,SACI,qBAAKS,IAAK/B,EAAMQ,IAAKwB,IAAI,YC+CtBC,G,wDA5Cb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAQRkC,kBAAoB,WAElBzB,MADQ,kFAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,EAAKR,SAAS,CAAEU,KAAMF,EAASE,UAEhCE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAhBT,EAoBnBmB,QAAU,SAAAC,GACR,EAAKjC,SAAS,CAAEU,KAAMuB,KAlBtB,EAAKf,MAAQ,CACXR,KAAM,IAJS,E,qDA0BjB,OACE,sBAAKS,UAAU,YAAf,UAEE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CAAaR,OAAQY,KAAKS,YAG5B,qBAAKb,UAAU,QAAf,SACGI,KAAKL,MAAMR,KAAKwB,KAAI,SAACC,EAAMC,GAAP,OACnB,cAAC,EAAD,CAAqB/B,IAAK8B,EAAKE,OAAOC,SAASjC,KAAjC+B,e,GAtCRV,cCMHa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5edf3b79.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SearchField.css';\n\nclass SearchField extends Component {\n\n    // constructor\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userInput: \"\",\n            data: []\n        }\n    }\n\n    // get user input from search bar\n    getUserInput = event => {\n        this.setState({ userInput: event.target.value});\n    }\n\n    // get gifs based on user input to search bar\n    getRegular = (event) => {\n        let url = `http://api.giphy.com/v1/gifs/search?q=${event.target.value}&api_key=HlCrEXQnEe17192XoPZwBfFJW942fIFx`\n        fetch(url)\n        .then(response => response.json())\n        .then(response => {\n            this.setState({ data: response.data});\n            this.props.update(response.data);\n        })\n        .catch(err => console.log(err));\n    }\n\n    // get trending gifs\n    getTrending = () => {\n        let url = 'http://api.giphy.com/v1/gifs/trending?api_key=HlCrEXQnEe17192XoPZwBfFJW942fIFx'\n        fetch(url)\n        .then(response => response.json())\n        .then(response => {\n            this.props.update(response.data);\n        })\n        .catch(err => console.log(err));\n    }\n\n    // get a random gif\n    getRandom = () => {\n        let url = 'http://api.giphy.com/v1/gifs/random?api_key=HlCrEXQnEe17192XoPZwBfFJW942fIFx'\n        fetch(url)\n        .then(response => response.json())\n        .then(response => {\n            this.setState({ data: response.data });\n            this.props.update([response.data]);\n        })\n        .catch(err => console.log(err));\n    }\n\n    // render SearchField component\n    render() {\n        return (\n            <div className='container'>\n\n                <div className='searchBar'>\n                    <input type='text' placeholder='Find GIFs...' onChange={this.getUserInput} id='bar'/>\n                </div>\n\n                <div className='buttons'>\n                    <button onClick={this.getRegular} value={this.state.userInput}>Search</button>\n                    <button onClick={this.getTrending}>Trending</button>\n                    <button onClick={this.getRandom}>Random</button>\n                </div>\n  \n            </div>\n        )\n    }\n}\n\nexport default SearchField;\n","import React from 'react';\nimport './GifCard.css';\n\nconst GifCard = props => {\n    return (\n        <div className='container'>\n            <img src={props.url} alt='gif'/>\n        </div>\n    )\n}\n\nexport default GifCard;\n","import React, { Component } from 'react';\nimport SearchField from './components/SearchField';\nimport GifCard from './components/GifCard';\nimport './App.css';\n\n\nclass App extends Component {\n\n  // constructor \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    }\n  }\n\n  // display trending GIFs when component mounts\n  componentDidMount = () => {\n    let url='http://api.giphy.com/v1/gifs/trending?api_key=HlCrEXQnEe17192XoPZwBfFJW942fIFx';\n    fetch(url)\n    .then(response => response.json())\n    .then(response => {\n      this.setState({ data: response.data});\n    })\n    .catch(err => console.log(err));\n  }\n\n  // update state from SearchField component\n  getData = newData => {\n    this.setState({ data: newData });\n  }\n\n  // render App component\n  render() {\n    return (\n      <div className='container'>\n\n        <div className='searchField'>\n          <SearchField update={this.getData} />\n        </div>\n\n        <div className='cards'>\n          {this.state.data.map((item, index) => (\n            <GifCard key={index} url={item.images.original.url} />\n          ))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}